selector {
   property: value;
}

세미콜론 빼먹지 말기 -> css는 뭘 빼먹어도 절대 안알려준다.
selector -> 도대체 뭘 꾸밀건지 이름을 부르자
property:value -> 어떻게 꾸밀지 계획같은거지

css를 짜는 가장 좋은 방법은 .css파일에 써서 적용되는 것
그 외 방법은 유지보수가 어렵다.

1강. selector

type selector:태그 자체를 직접 지칭
p {}
blockqoute {}

class selectior:클래스를 지칭
<div class="라면">
...
</div>

.라면 {}   : 반드시 점을 찍는다.
같은 스타일을 여러개에 적용하고 싶을 때 클래스를 이용한다.
<div class="라면 안성탕면 물"> 띄어쓰기로 구분한다.
...
</div> 여러 클래스를 가질 수 있다.
여러 클래스를 css로 다룰 때
.box0.box1 :안띄우고 그냥 붙여서 쭉쓰면 박스0이자 박스1인 것의 스타일
이런 뜻이고 띄우면 뜻이 달라진다.

id selector:  아이디를 지칭
<div id="라면">
...
</div>

#라면 {} : 반드시 샵을 넣는다.

-->위에 띄우지 않고 계속 쓰는거는 클래스와 아이디 같이 있는 것을 혼용할 수도 있다.
#class.id ->클래스이자 아이디, 그리고 순서는 상관없다.

2강
자식선택자 자손선택자 형제 선택자들
child, descendant & sibiling combinators
자식은 스페이스 두번 자손은 스페이스 네번
직접적으로 감싸는 애들은 자식, 그보다 더 딥한 아래는 다손
동등한 띄어쓰기(계층)끼리는 형제

parent>child {} -> section>h1{} section의 자식인 h1을 css로 스타일링
parent descendant {}  -> section h1 {} section의 자손인 h1을 css로 스타일링하는데 h1은 자식도 포함한다. 자식,자손 둘다..
parent + sibiling -> .active + li {} parent랑 그 아래 다음에 있는 애만 적용한다. 딱 두개만 스타일 적용..
parent ~ sibling {}  -> .active ~ li {} 스타일을 적용하고 싶은 시작점이 parent고 얘랑 계층이 같은 이후에 오는 sibiling을 모두 같은 스타일로 적용하고 싶을 떄 ~를 사용한다.

3강 구조적 가상 클래스 선택자(structural pseudo-classes)
first child
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>

css에서 첫번째 li에 스타일을 적용하고 싶으면
li:first-child {}

css에서 마지막 li에 스타일을 적용하고 싶으면
li:last-child {}

css에서 n번째 li에 스타일을 적용하고 싶으면 -> 많이씀
li:nth-child(3) {}
3번째 요소에 스타일 적용

3대신 2n-1 ->홀수

4강 user action pseudo-classes 어떤 상태나 조건에 부합했을 때
:hober -> 어떤 요소에 마우스를 가져다 댔을 때 상태를 달리함
.class1.hober { 내용 } 이런 식으로 사용함.

:active -> 어떤 요소에 클릭을 했을 때부터 뗄 때까지 상태를 달리함
.class1.active { 내용 }

:focus -> 어떤 요소를 클릭이든 탭이든 뭐든 focus가 되었을 때
input:focus {내용} 

:link ->방문 안한 링크의 스타일
:visited -> 방문한 링크의 스타일



5강 css

1. css에서는 기본적으로 나중에 선언된 애들을 덮어쓴다.

p {color:blue;}

p {color:hotpink;}
이러면 핫핑크로 덮어짐.

2. 선택자 우선순위(각 선택자들마다 점수가 있다고 생각하고 점수 합계가 높은 애들이 우선이다.)

ID > class / Pseudo-class >Type(태그 자체)

단 한개의 ID가 열개의 class보다 우선순위가 높다. 맨 아래에 클래스가 있어도 id가 우선이다.

.box p > 그냥 p

점수 합산방식
#gnb.tab-nav -> id 1개 클래스1개
header.main-header 클래스1개 태그1개
#gnb.tab-nav ul id1개 클래스1개 태그1개
#gnb.tab-nav ul:last-child id1개 클래스2개 태그1개 ->가상 클래스는 태그1개 클래스1개 각각 하나씩으로 센다.

우선순위 파괴..
inline style -> html에서 태그에 style이라는 속성을 만들고 스타일을 때려버리면 되는데 정말 어쩔 수 없는거 아니면 쓰지 말자 제발
important => 인라인 스타일이고 뭐고 다 이겨버림.. css에서 코드를 쓰고 마지막 줄에 !important를 써버리면 된다.
* {
	color: hotpink !important;
}



1. box
box란? html의 요소들은 css로 표현하면 박스로 표현된다.
content/padding/border/margin

content: 가로:width 세로:height

padding: content와 border사이에 공간이 padding 안쪽 여백 top right left bottom

border: 줄 ->테두리 굵기/테두리 스타일/색 1px solid white 모두 작성해야 테두리가 생김 순서는 바뀌어도 상관없음 (줄 쓰기 싫으면 none)
여기간하면 1px에 solid를 쓴다고 함
border-radius: 4px -> 쓰는 숫자만큼 둥글어진다. 아예 동그랗게 만들고 싶으면 50%라고 한다.
왼쪽 위만 원형으로 깎고 싶을 때는 border-top-left-radius: 이렇게 지정한다.

margin: 바깥 여백
margin-top: 40px 이런식으로

속기형 Shorthand : 빨리 쓰는 방법
padding-top/padding-bottom 다 선언하기 싫어서 한번에
시계 방향이다. top right bottom left 순으로 적는다.
padding: 40px 20px 40px 20px
이런 식으로 padding margin 모두 적용 가능하다.
->아니면 margin: 20px 40px 이렇게만 작성하면 top bottom이 20px right left 40px
margin: 10px 20px 40px ->top 10 bottom 40 right left 20
다른 경우의 수는 없는듯

2. box sizing
content padding border margin은 그냥 하면 스택처럼 쌓인다.
하나하나 다 계산하기 싫어서 box-sizing을 선언한다.
기본적으로는 모든 요소는 box-sizing이 content box로 설정되어있다.

보통 사람들은 box size를 content가 아니라 border까지라고 생각한다.
그래서 box-sizing을 수정한다.
box-sizing: border-box;
그냥 padding-box나 margin-box모두 가능하니까 내가 필요한걸로 취사 선택한다.
아무튼 스택 쌓인거에 별도의 계산이 필요없다.

보통 개발자들은
* {
	box-sizing: border-box;
}
이렇게 처음에 시작함.

3. box
레이아웃이 이상한 이유는 box를 제대로 이해 못해서^.^;
box랑 box-model이랑은 다름
박스의 타입에 따라서 박스 모델이 작동 방식도 다르다.

display : 박스타입을 결정하는 속성
모든 html요소는 display값을 가지고 있다.

3-1 block 길막,막다, 차단하다
자기 옆 자리에 아무것도 못오게 한다.
width 1000px짜리 공간에서 width 400px짜리 사각형을 놓으면
600px이 남지만 그래도 다른 요소들을 옆자리에 못오게한다.
400px짜리 사각형 또 선언하면 그 아래에 쌓인다.

1.width를 따로 선언하지 않으면 width=부모 content의 100%이다.
2.width를 선언한 경우, 남은 공간은 margin으로 자동으로 채움 ->parent랑은 상관없이 width를 설정한 박스 자체에서 나머지를 마진으로 놓음
box-sizing이랑은 상관없이 그냥 width+padding+border빼고 나머지 전부다 margin으로 놓음.
검사창으로 보면 딱히 설정을 안해놓으면 margin이 아무것도 없는 것처럼 -으로 표현되어 있기 때문에..잘 기억해놓는다.

*margin: auto -> 그냥 마진을 알아서 잘 나눠서 배분한다.
위아래도 1/2씩 양옆도 1/2씩 나눠서 중앙정렬한다.
margin-left: auto ->마진을 왼쪽에만 배분한다=몰빵하겠다는 소리
margin-right: auto를 같이 쓰면 자동으로 왼쪽 오른쪽에 나눠서 쓴다.

div

3.따로부모의 height를 선언하지 않으면 자식의 height 합=부모의 height
content~margin까지 모두 합해서 부모의 height 값이 된다.

3-2 inline ->흐름, 옆으로 늘어섬
inline이 쭉 옆으로 있다가 parent길이가 모자라면 알아서 다음 inline이 아래로 떨어짐
그냥 글쓰는거랑 똑같다고 생각하면 된다.

*block : 면,영역 /inline : 선,흐름 -> 인라인은 흐름을 깨는걸 엄청 싫어한다.
->width, height, padding-top,padding-bottom, border-top, border-bottom,margin-top,margin-bottom
이런 위아래 크기 정하는거 절대 못씀
적용은 될지언정 의미가 있는게 아니라서 width는 적용도 안되고(검사창에서는 확인가능함)
padding-top은 그냥 위로 뻗쳐나가서 글씨를 덮어버린다. 글씨들이 개무시깐다는 소리임.

span

3-3 inline block: 짬짜면, 블록과 인라인의 좋은 점을 모두 가지고 있다.
인라인에 블록 능력을 탑재한다. 기본적으로 가로로 흐르고 있으면서도 영역을 잡고 있다.
displaty: inline-block;
블록의 모든 설정을 다 사용할 수 있으면서 기본적으로 흐른다는 느낌을 가지고 있다.

*모든 박스 타입은 용도가 다르기 때문에 뭐가 더 좋고는 없다.

3-4 flex

4. float : 가로배치를 하기 위해

4-1 float를 사용하면 무슨 일이 일어나는가?
뜬다! 부모한테서 붙어야할 애가 뜬다!

1)float를 쓰면 부모는 자식을 집나간 자식으로 생각한다.
->부모의 height는 자식의 height의 총합인데 그 총합 식에서도 빠지고
빈 공간이라고 생각하니까 나머지 자식들도 빈자리를 메꿔버린다.

float : left? ->자신이 갈 수 있는한 가장 왼쪽으로 간다.
float : right ->자신이 갈 수 있는 한 가장 오른쪽으로 간다.

2)float가 된 자식은 block으로 변한다.
(display를 쳐보면 block으로 변한 것을 확인할 수 있다.)

3)근데 길막을 못하는 블록이 된다. -> 갱장히 중요
1.따로 width선언을 안하면 부모의 content-box 100%가 width가 되면서 길막
-그냥 실제 content 길이 딱 맞춰서 width가 정해진다. 
2.width선언을 하면 margin이 나머지를 채우면서 길막
-자동으로 생기는 margin이 없고 0이다. margin을 줄 수 없는 것은 아니다. 그냥 기본값으로 0으로 설정이 된다.

4)연속적으로 float를 시키면..
float:left
float:left
이렇게 두개 다 left를 하라고 시키면 둘다 자기가 갈 수 있는 한 가장 왼쪽으로는 가는데,
float로 2층으로 움직인다고 치면 
둘다 2층으로 갔다고 볼 수 있다.
갈 수 있는 층은 동일하고 같은 층에 동시에 존재는 못하니까
남은 2층 공간중에 제일 왼쪽으로 간다.
근데 이 왼쪽이라는게 부모 공간 안에서 인라인 느낌으로 왼쪽에 붙는거라
처음 float시킨 애 오른쪽으로 챡 붙어서 왼쪽으로 딱딱 계속 붙이는 느낌..

세개를 연속으로 float시키고 세번째 애를 일렬로 정렬할만큼 가로 공간이 부족하다고 하면
아래쪽으로 자식이 움직인다. 부모는 모두 float시켜버려서 공간을 잃어버린다. (중요)

부모는 공간을 잃어버렸는데 부모와 형제인 요소를 만들고 거기다 막 만들면 굉장히 이상한^^..결과가..

5)인라인요소들은 플로트된 요소들의 존재를 알고 있다.
->블록이나 인라인블록은 모르는데 인라인들은 플로트된 존재를 알고 있기 때문에 형태가 붕괴된다.
그래서 <p>에 들어있는 글같은거는 시블링의 플로트된 요소들의 자리를 피해서 글이 나열된다.

->복잡하고 이상해서 요즘엔 새롭게 만드는거에서 잘 안쓰지만
플로트를 쓴 옛날 코드들을 자신있게 고치기 위해서 배우는 것이다ㅠㅠ

4-2 그럼 float를 썼을 때 어떻게 박살난 것을 고치는가?
쉬운 길과 어려운 길

쉬운길 : overflow:hidden; ->부모한테 overflow:hidden을 주면 그냥 float된 자식을 찾는다. 이유는 김버그도 모른다. 외운다.
정석 : clearfix

clearfix
css 속성 clear-> 오로지 이 float때문에 망가진 것을 고치기 위해서 사용한다.
clear:left -> float:left의 속성을 가지고 있는 애들을 인지할 수 있게 한다. (float와 같은 계층의 자식 요소한테 부여하는 속성)
부모는 역시나 float의 영역을 알 길이 없지만
clear를 가지고 있는 자식이 float의 존재를 알고 있기 때문에
결국은 인지된 범위 안에서 float인 자식까지 포함해 부모의 영역이 잡힌다.

clear는 letf,right,both 세가지 속성을 가진다. both는 왼쪽 오른쪽 둘다

---------
이렇게 되면 결국에는 쇼핑몰에 있는 물건 카드처럼 float로 애들을 나란히 배열시켜야하는 경우에
html로 div를 넣거나 css로 pseudo element를 넣는다.
div는 그냥 스타일적인 것을 위해서 빈 공간을 넣어주는걸 html로 하게 되니까
정보의 성격을 가지지 않는 요소가 들어가는게 별로라
css로 pseudo element를 만든다.
그리고 pseudo element에 clear를 먹인다.

-->float를 쓴 애들의 부모의 가상 요소를 만들어서 사용
.parent::after{
 content: ""; ->별 말 안쓸거니까 그냥 비운다.
 display: block; ->클리어는 블록에만 쓸 수 있다.
 clear:left; ->예제에서는 float:left만 있어서..
}

패런츠는 어쨌거나 자식요소들이 있는 위치에 현재 겹쳐있다고 생각한다.
그리고 그 패런츠의 바로 뒤(이 경우는 오른쪽)에 빈공간을 만들어놓고
가상공간의 왼쪽에 플로트를 감지하고 걔네랑 안겹치게 하라는 뜻이다.

---가상요소 대강 설명---
<div class="pseudo">RED</div>
<div class="pseudo">YELLOW</div>
<div class="pseudo">BLUE</div>
이렇게 있고 레드,옐로,블루 왼쪽에 리스트처럼 예쁘게 이모티콘을 넣고 싶으면

css에서
.pseudo::before {
 content: "넣고 싶은 이모티콘";
}
이렇게 쓴다.
::before도 되고 ::after도 되고
content는 넣고 싶은 말을 쓸 때 이용한다.

이 before, after같은 가상 요소에도 폰트 지정,이탤릭체,백그라운드 모두 가능하다.

float 실습1
html처럼 똑같이 뭐부터 건드릴지 생각한다.
1. 더러운 땡떙이를 없앤다.
2. 더러운 땡땡이때문에 부여된 패딩을 없앤다.
-->ul에 적용시킨다.
3. 가로로 배치한다. (인라인/인라인 블록/플로트) ->인라인은 패딩이나 마진을 못주니까 빼고 원래는 인라인 블록을 하겠지만 이번 섹션은 플로트라서 플로트를 한다.
4. 간격을 준다.
1)마진을 준다.
2)패딩을 준다. -> 앵커를 포함하고 있으면 앵커에 줘야 글씨 옆 공간을 클릭해도 그쪽으로 넘어간다. ->어디 내부에 있는 앵커는 .tab-menu-item a 이렇게 띄어쓰기를 한다.
5.선택된 애는 다르게 색을 칠해야하니까 두가지 클래스를 모두 가지고 있다. ->.tab.active이런 식으로 띄어쓰기를 안한다.

가로 배열 시키고 싶은 애들한테 플로트를 주고 그 부모한테 가상요소 만들고 클리어를 줘서 원천봉쇄 시키고

float 실습2
1.이미지를 작고 동그랗게 만든다.
width,height를 조정하고 border-radius: 50%
2. 이미지랑 글자를 나란히 만든다.
뭐..그냥 인라인 블록을 써도 되는데 이 예제에서는 플로트를 썼다.
그리고 그 이미지랑 글이랑 똑같은 높이서 시작하게 만들려면
그림이랑 글자랑 둘다 위아래 마진이 없단 전제하에 양옆쪽 간격만 확인해서 적절하게 넣어주고 외곽은 그냥
그림이랑 글자가 속한 부모의 마진을 생각한다.
3.글자 크기와 간격을 조정한다.
간격 조정할 때 top썼다가 bottom썼다가 하지 말고 둘중에 하나만 일관적으로 사용한다.
4.카드 크기 자체를 조정한다.
2번에서 부모의 마진을 생각하는게 카드 크기 자체 조정이다.

상관없는 두 클래스한테 똑같은 디자인을 주고 싶으면
,로 구분한다.

매번 클리어 부모 어쩌구 하기 싫으면

.clearfix {
content: "";
display: block;
clear: both;
}

이렇게 아예 폼을 만들고
플로트를 쓴 부모의 클래스에 clearfix를 추가하는 방식으로 사용한다.

position-element를 원하는 위치에 위치시키는 것

속성은 5가지
1.static ->모든 요소의 포지션 기본값.

2.relative -> 기준점:element가 있었던 그 자리. 거기에서 상하좌우로 자유롭게 움직임
float처럼 붕뜨는건 맞는데 레이아웃이 붕괴되거나 주변 요소에 영향을 끼치진 않음
자신이 원래 있던 위치는 기억을 하고 있기 때문이다.
형제나 부모 요소들도 다 기억을 하고 있다. 그래서 형제 요소들이 밀려나고 그런건 없다.
사실상 블록이랑 똑같아서 width도 가만 냅두면 부모의 100%로 설정된다.

position: relative;
top: 20px; -> 원래 있던 자리의 top을 기준으로 20px밀려난다 -> 아래로 감
right: 200px; ->원래 있던 자리의 right를 기준으로 200px밀려난다. -> 왼쪽으로 감

3.absolute->width를 설정해도 margin값이 자동으로 나머지를 가져가진 않는다. 블록의 성질을 잃어버린다. fixed와 함께..
float랑 비슷하다. 부모가 찾을 수 없다-> 부모의 width, height 모두 집나간 자식 값을 빼버린다.
붕 뜨면서 block으로 변한다. 근데 길막을 못하는 블록이 된다.
padding, height이런 값들을 변경할 수 있다.
대신 float랑 다른 점은 inline요소들이 앱솔루트한 것들을 못찾아서 그냥 글자가 앱솔루트에 묻혀버린다.
그냥 대책없이 붕 떠버리는게 앱솔루트
그리고 float는 어쨌든 위치가 부모한테 종속되는데
앱솔루트는 포지션이 스태틱인 조상들은 기준점으로 못쓴다.
그 위의 조상이 랠러티브/앱솔루트/픽스드/스태틱(사실 스태틱빼고) 중에 하나면 그 조상을 기준점으로 삼는다.
가장 만만한 조상의 포지션은 랠러티브로 바꾸는 것->주변 요소한테 영향을 끼치지 않음
위치 조정 방법은 랠러티브랑 동일하다.

4.fixed->viewport 사이즈를 기준으로 움직이겠다.
viewport : 브라우저 창 
bottom: 0px이면 브라우저 창 맨 아래에 고정되어있다.
body가 3000px이라고 치면 스크롤이 생기는데,
그 스크롤과는 무관하게 화면 맨 아래에 붙어있다.

5.sticky -> 지원하는 브라우저 별로 없음. 근데 편한듯

type->기준점
top, bottom , left, right는
top, bottom중에 하나만, left, right는 둘중에 하나만 해서
딱 두개만 쓰는게 정신 건강에 좋다^^..

z-index
붕뜬 애들의 높이->적당히 가리고 위에 놓고 그러고 싶을 때 쓴다.

position실습

먼저 html 확인

1.그림 작고 동그랗게 -> 이거까진 했는데 img의 경우에는 디스플레이가 인라인인데도 위드랑 하이트가 먹는다.
그래서 김버그는 블록으로 바꿔 놓고 시작하는 것을 선호한다고 한다..

2. 글씨 크기

3. 그림이랑 글씨 나란히->아직은 float를 쓰는데 너무 구려..

4. 초록 동그라미 ->그냥 만드려는 것을 html에서는 span으로 줬다 -> 온라인 오프라인? 그 정보도 나름의 정보이기 때문에 css만으로만 처리하진 않은 듯
놀랍도록 아무 변화가 없다-> 디스플레이 값을 본다. -> 인라인이네? -> 아무것도 할 수가 없다.. -> 블록으로 바꾼다.
color->글자색 background-color->배경색, 그냥 오브젝트를 만들 때 글씨가 따로 없으면 백그라운드 컬러

4번 위치-> 1. 엘리먼트를 창화면 특정 공간에 배치해야하는가? -> fixed
	   2. 자기 원래 자리에서 조금 움직이고 싶다->reletive
                3. 확떼고 다른 위치에 놓고 싶다. -> absolute -> 이거 쓰면 블록으로 설정한 코드 지워도 된다.

top, right, left 같은 위치조정은 border-box면 border를 기준으로 하고 margin은 무시

포지션은 그림을 차곡차곡 쌓는데 그게 틈으로 아래 그림을 보고 싶을 때 쓰는 듯하다.

position2실습
먼저 배경이 되는 곳에 width를 설정해주고
이미지의 경우에는 그냥 지 크기를 따로 가지고 있기 때문에
width: 100%
height: auto로 하면 된다. ->많이 씀

top: 50% ->딱 top의 반이 시작되는 지점에 앨리먼트를 놓기 떄문에 약간 아래로 가는 경향이 있다.
이때, transform을 사용해서 앨리먼트의 크기 같은 것을 변경한다.
transform: translateY(); ->y를 선택하고 -50%를 하면 딱 맞게 변함.
트랜스레이트는 기준이 자기 자신인데, -50%는 위로 올라가라는 것이고 자기 자신 길이의 반만큼 위로 올라가라는 뜻이다.

position3 실습
인풋은 그냥 전체 크기를 늘린다->width, height
글자 위치를 바꾸고 싶다->padding
입력창이나 버튼의 border를 없애고 싶다->border: none;

flextbox->정렬의 끝판왕 너모너모 좋다고함 float나 position보다 많이 쓰는듯?
원리 이해는 필요 없고 방법만 배우면 된다.

4가지 사고 과정만 생각한다.
1. 나 플렉스 박스 쓸거다 선언 ->display: flex; 혹은 display: inline-flex; (인라인 플레스는 인라인의 성질을 가지고 있고 플렉스임)
내가 정렬을 하고 싶은 element의 부모에게 선언을 해야한다.

2.가로 정렬? 세로 정렬? flex-direction: row; flex-direction: col;
역시나 부모에게 선언한다.
플렉스를 선언하면 보이지 않는 축이 생긴다.(Axis)
그리고 플렉스 디렉션을 뭐로 주냐에 따라서 축 방향이 완전히 바뀐다.
main axis(플렉스 디렉션 방향과 수평,왼쪽에서 오른쪽) / cross axis (수직,위에서 아래로 방향)
flex-direction: row면 main axis가 가로고 cross axis가 세로축
col은 반대이다.
row-reverse/col-reverse는 잘 안쓰긴 하지만
row-reverse는 오른쪽에서 왼쪽, 위에서 아래로 세트 구성
col-reverse는 아래에서 위쪽,왼쪽에서 오른쪽
 
3.무조건 한 줄안에 정렬할지 아님 여러줄로 분할할지?
역시나 부모에게,,
flex-wrap: nowrap; 이게 기본설정이고 자식의 사이즈를 줄여서라도 전부다 한줄에 정렬해버림
flex-wrap: wrap; 이건 자식의 크기를 무적권 유지하고 공간이 모자라면 아래로(옆으로) 떨어뜨려버린다.

4.신나게 정렬
main axis를 기준으로 정렬하고 싶으면 justift-content를 이용하고
cross axis를 기준으로 정렬하고 싶으면 align-items나 align-content를 이용해서 정렬한다.

화면상으로 왼쪽에 붙어서 시작할거면 justify-content: flex-start;
오른쪽에 붙어서 시작할거면 flex-end; 컨텐츠 글자 순서랑은 상관없이 화면 배치임..
메인이랑 크로스 둘다 정렬이 한번에 가능한데,
justify-content: flex-start;
    align-items: center; 이렇게 쓰면 가운데 정렬이 가능함. -->이부분 잘 모르겠음
아 그냥 한번 봐주긴 해야한다는 얘기임

flex1,2실습 -> float를 대신해서 쓰는것.

플렉스는 
flex-direction: row;
flex-wrap: nowrap;
justify-content: flex-start;
aline-items: flex-start;
이 세개는 선언 안해도 기본값이라 선언 안해도 괜찮음

justify-content: space-between;
이거는 width크기에 맞춰서 안에 들어가는 자식 요소들을 알아서 띄어쓰기해서 맞춰줌
그래서 적용했을 때 자식요소들간에 거리가 너무 멀면 width를 조절하면 된다.
디자이너가 간격을 무조건 몇 픽셀로 고정해달라고 하는게 아니라면 쓰고
맞으면 그냥 margin이나 padding으로 간격 고정하고 space-between을 쓰지 않음.

flex3실습
text-align은 인라인이나 인라인 블록 요소만 가능한듯->텍스트 어라인주고 다 인라인 블록으로 하는거 말고
그냥 플렉스로 배치하는게 나은가봄

center vs space-between -> 센터는 딱 붙여서 가로로 스페이스는 간격 띄우고 가로로
아무리 봐도 text-align이랑 저스티파이는 모르겠음
->col이 기준일 때
justify는 y축간격을 얼마나 줄거냐 얘기하는거고
text-align은 x축 간격을 얼마나 줄거냐는건데 어라인을 센터로 놓으면 x축이 가운데인 지점에 모든 요소들의 가운데를 배치하겠다는 얘기이다.

간혹 플렉스로 간격을 맞추다보면 형태가 찌그러져 있는데, 박스 크기가 너무 작은게 아닌가 의심해본다.
width: 100%

그리고 그래도 글자 간격이 짜부가 되어있는데, 진짜 글자라 인라인이면 text-align을 쓴다.

미디어쿼리->반응형 웹 만들기에 쓴다. (responsive web:사용자가 접속한 브라우저의 크기를 따른다.)
viewport meta : html
media query : css
->둘다 써야 반응형으로 만들어짐

@media screen and (min-width: 768px) {
 내부에 바꾸고 싶은 것을 원래 css 작성하는 거처럼 이름 {} 이런식으로 코드 작성하기
} -->이런 코드는 바꾸고 싶은 크기마다 계속 선언하면 된다.

미디어쿼리를 선언한다/스크린에 관해/최소 화면 가로 사이즈가 768px이상이다.
->min은 저 수를 넘으면 어떤거로 하겠다 그런거라서 min: 768px이면 태블릿를 말하는 것이다.
568? ->핸드폰 992이상->데스크탑

100vh -> viewport height : 창의 height는 전체 보고 있는 화면의 세로 길이와 일치한다.
1vh ->뷰포트 높이의 1% , 100vh ->100%

css에서 글자쓰기-> 가상요소로 글자쓰기
.box::after { content: "쓰고 싶은 글자";}

*디자이너가 너무 시안을 거지같이 연동 안되게 짜면 그냥 html을 두개 만든다ㅠ
국내는 보통 그렇게 한다고 한다..

미디어쿼리 실습
1. 항상 시작은 모바일부터 만드는게 정설
작은 사이즈일 때 어떻게 만들지 생각하고 커지면 대응하는걸로..! 

a안에 텍스트도 a의 자식이다. (중요!)

그리고 차이점이 되는 부분만 선언을 따로 해주면 된다.
예를 들어 .banner의 height가 64px -> 80px이면 .banner { height: 80px }
그리고  position: fixed;
    bottom: 0;
    left: 0;
여기서 bottom을 top으로 바꾸고 싶으면 bottom:auto로 놓고 top:0;으로..
fixed는 따로 선언할 필요 없음.

typography : 텍스트를 이쁘게 디자인
가독성이 좋게

1.중요한거
font-size 글씨크기 font-size: 16px;
폰트 사이즈 단위: px /em /rem
px:절대 단위->어디 창이든 절대 값으로 고정
em/rem->폰트 사이즈가 상대적임

em=equal to capital M 대문자 M을 기준으로 한다.
실용적인 관점->실제로 적용된 폰트 사이즈를 1em으로 본다.
font-size: 16px; ->1em=16px
어딘가에 px로 글씨 크기를 적용한다음 실제로 적용할 곳에 2em이런 식으로 폰트 사이즈를 설정해주면 px * em 으로 폰트 크기가 적용된다.

rem=root em 루트라는 것은 html을 의미한다.
css파일에서 html{ }안에 적용된 font-size를 기준으로 적용된다.
실제로 폰트사이즈를 적용할 태그나 클래스 안에서는 font-size: 3rem을 하면
px * rem해서 글자 크기가 적용된다.
 
line-height 줄 간격 ->em을 많이 사용한다.
해당 폰트 사이즈에 비례해서 먹이겠다는 소리이기때문에..
line-height: 1.5; ->줄 간격 150%인데 줄 간격에서 em을 사용할 때는 em을 생략하는 것이 관례이다.
픽셀로도 줄 수 있고 rem도 가능하다.
line-height는 띄어 쓰기를 한 그 간격 자체가 아니라 글자의 전체 세로 간격이고
그 가운데에 폰트가 들어가서 폰트 사이즈를 차지한다. 어떻게 보면 약간 top,bottom margin같은 느낌

letter-spacing 자간->그냥 글자 사이의 가로 간격, 띄어쓰기를 안해도 띄어지는 그 글자사이 간격
letter-spacing은 rem잘 안쓴다. px, em을 많이 쓴다.
보통은 em을 사용하고, em을 생략하면 안된다.
letter-spacing: -0.01em -> 1%간격 줄임

font-family 폰트 서체
font-family: "Poppins"; ->팝핀스를 적용해라
font-family: "Poppins", sans-serif; ->팝핀스를 적용해라. 없으면 아무 산세리프 계열을 적용해라
font-family: "Poppins", "Roboto", sans-serif; ->팝핀스를 적용해라 없으면 로보토를 적용해라 그것도 없으면 산세리프계열 아무거나 적용해라
sans-serif같이 뒤에 아무거나 이중에 적용해라라는게 콜백폰트
serif는 삐침이 있는 명조체같은 영어 서체고
san-serif는 삐침이 없는 고딕이나 돋움체같은 영어 서체임

font-weight: 폰트 굵기
font-weight: 100; 100단위씩 커진다. 750이런건 안먹음

100:Thin
300:Light
400:Regular
500:Medium
700:Bold
900:Black
가장 중요한건 400,700

color:글씨 색상
글씨 색상 정하는 방법
hex->#0066ff rgb->rgb(0,102,255) rgba(0,102,255,1)

rgba는 불투명도도 포함된 개념.
0->완전 투명 1->완전 불투명 0.5->반

2.그래도 알긴 해야하는거
text-align ->텍스트 정렬 left,right,center

text-indent ->들여쓰기 (앞부분 들여쓰기)
	라라라라라라라라라라라라라라라라
로로로로로로로로로로로로로로로로로로로로
레레레레레레레레레레레레레레레레레레레레
이런 식으로 앞부분을 띄움
text-indent: 100px; ->100px만큼 들여씀
-100px하면 왼쪽으로 파고 들어감

text-transform -> 문자 변형인데 한중일보단 영어
none -> 기본상태
capitalize ->모든 단어의 첫번째 알파벳은 대문자로 변경
uppercase->모든 단어의 알파벳이 대문자로
lowercase->모든 단어의 알파벳이 소문자로

text-decoration->텍스트에 줄긋기
none->줄 없음:보통은 앵커태그 만들어놓고 아래 줄을 없앨 때 사용한다.
underline->글자 아래에 줄 생김
line-throught->글자 가운데에 줄 생김
overline: 글자 위에 선이 생김

어떤 것은 폰트고 어떤 것은 텍스트인데 뭔 차이야? 그냥 통일이 안된건가보다.

font-style->이탤릭체 같은거
normal: 그냥 일자체,기본값
italic: 이탤릭체
oblique: 거의 안씀, 이탤릭이랑 별로 차이가 없음

<em>을 먹이면 기본적으로 이탤릭체로 바뀌는데
이것을 font-style: normal; 으로 기본으로 바뀐다.

webfont ->사용하는 방법
웹사이트에서 자 폰트 이거니까 먹여주세요 했는데
사용자가 그런 글씨체 없다고 하면 그냥 맑은 고딕이나 먹어버린다..

사용하는 방법

1.갖다 쓴다.
html head에 link넣고
css의 글씨체를 적용하고 싶은 곳에 폰트 패밀리를 넣는다.

2.직접 제공한다.
assets라는 폴더에 font폴더를 만들고 폰트 파일을 넣는다.
font.css를 만들어준다.
@font-face {
    font-family: 'NanumSquareRoundEB'; ->안에 들어갈 폰트 이름은 아무거나 해도 되고 소스는 또 따로임. 하지만 보통은 폰트 이름으로 한다.
    font-style: normal; ->가끔 이탤릭만을 위한 폰트도 있어서 그건 이탤릭으로 놓는다.
    font-weight: 400;
    src: url(경로) format(확장자),
          url(경로) format(확장자),
          ...; ->엣지,크롬,ios등등 지원하는 확장자가 달라서 외우지는 말고 그냥 나중에 긁어오되 경로만 제대로 한다.
}
@font-face {
    font-family: '글씨체이름+글자크기'; ->안에 들어갈 폰트 이름은 아무거나 해도 되고 소스는 또 따로임. 하지만 보통은 폰트 이름으로 한다.
    font-style: normal; ->가끔 이탤릭만을 위한 폰트도 있어서 그건 이탤릭으로 놓는다.
    font-weight: ***;
    src: url(경로***) format(확장자),
          url(경로***) format(확장자),
          ...; ->엣지,크롬,ios등등 지원하는 확장자가 달라서 외우지는 말고 그냥 나중에 긁어오되 경로만 제대로 한다.
} ->이 포맷을 글씨 크기마다 모두 적용해준다.

마지막으로 html에 <link rel="stylesheet" href="font.css">
혹은
css에 @import url("font.css경로"); 둘중 하나만 해도 가능하다.
직접 가져다 쓰는게 제일 쉬움......ㅠㅠ

타이포그래피 실습
1. 타이포 그래피 주소는 head에서 title다음으로 맨 위에 놓는 것이 좋다.
로딩될 때 글씨체가 먼저 되어야 좋기 때문에..

2.폰트가 적용되었는지 보려면 임의 글자 찍고 rendered fonts를 봐야한다.
그리고 폰트가 잘 오고있나 확인할 때는 검사에서 네트워크에 폰트탭을 보고 폰트파일이 여러개 있는지 확인한다->그럼 잘 오고 있는거

3.폰트 사이즈는 그냥 단순한 크기 말고 line height랑 letter space까지 포함한다.
-라이브러리를 만들 때는 이름을 일관적으로 만드는 것이 좋다.
예를 들면 fs-tiny = 폰트사이즈 타이니. 좀 더 명확하게 사용한다.
빠르고 쾌척하게 코드를 작성하고 싶으면 에밋 사용 방법을 공부한다.

4.css를 하기 전에 border-box로 놓고 갠적으로 김버그는 margin 0을 선호하는데,
브라우저가 기본으로 마진을 준다. 그래서 없애버리고 시작

패딩이랑 마진이랑 똑같은 형태를 구현하는데 다르게 쓰는 기준이 무엇이지?

Background
1.background-color 배경색상 설정
hex rgb rgba->color와 동일함

2.background-image 배경이미지 설정
url(경로)

background-image: url('경로');
경로는 두가지 방법있음
1)자체적 이미지는 상대경로 명시하고 확장자명 꼭
이미지가 작으면 도배된다.

2)인터넷에서 가져오는건데 이미지 우클릭해서 이미지 주소 복자 하면 된다
url에 그 인터넷에 있는 이미지 경로를 쓴다.

3.backgrount-repeat 이미지를 반복
repeat가 기본, no-repeat로 설정
background-repeat: no-repeat;

4.background-size:이미지 사이즈 조정
1)contain -> 이미지가 지정해놓은 사이즈 width나 height에  맞춰서 작아짐. 잘리지 않음
2)cover ->이미지가 지정해놓은 사이즈 width나 height에 맞춰서 길면 잘림.
3)custom -> 그냥 자체적으로 명시 -> 가로 세로 순

background-size: contain;
background-size: cover;
background-size: 100% auto;

5.background-position 백그라운드 이미지를 어떻게 위치시킬 것인가
x축과 y축을 순서로 써서 매칭한다.
역시 왼->오 위->아래
background-position: center center; -> 가장 많이 씀
background-position: 80% 50%;

백그라운드 실습
1.box-sizing
2.글씨체->타이포그래피 라이브러리 안만들고 그냥 한다.
3.이미지는 백그라운드->집주인이 그냥 올리는 사진이라 사진 크기도 알 수 없고 사진에 대한 정보도
개발자가 올릴 수 없기 때문에 사진 사이즈를 적당히 조정해주려면 백그라운드 이미지를 활용한다.
물론 할 수는 있긴한데 자바스크립트나 서버쪽에서 건드려야하기 때무네..
모든 이미지 사이즈에 대응하기 위해서는 백그라운드 이미지를..

백그라운드 이미지 사이즈에 cover를 적용하면 content크기에 맞춰서 꽉찬다.
이미지를 넣고 싶은 위치의 클래스 안에 백그라운드..

버튼에 있는 하트
백그라운드 이미지로 하트 심기 가능
사이즈는 컨테인이나 커버말고 내가 지정 가능하다는거 까먹지 말기

버튼에 그림자/별을 백그라운드로? 꾸미는 용도의 이미지 추가 방법
->넣어야 하는 지점의 클래스의 가상요소를 선언해서 만들어본다.
앞쪽에 와야하니까 before

묘하게 삐져나온 별
약간 조정해주려고 얘 자체한테 position: relative;를 이용한다.

묘하게 삐져나온 평점
이거는 따로 설명을 한 적이 없다고 하는데 width을 따로 설정을 안해서 그렇다고 한다.
->width를 쓰는게 아니라 남은 공간을 그냥 어영부영 쓰고 싶을 때 flex-grow를 사용해서 대강 키운다.

sr-only구현
display: none;은 스크린 리더도 없는 존재라고 생각하니까 안된다.
position: absolute; -> 집떠나버려서 영영 못찾음
    z-index: -100; ->지하 100층에 묻어버림
    width: 1px; ->크기 쥰내 작게해서 알아보지도 못함 근데 0px로 하면 display: none이랑 동일함
overflow: hidden;
opacity: 0; ->투명도 100으로 아예 투명하게

after나 before의 위치는 끝나고 떨렁붙는게 아니라 끝나기 전에 글자넣어버려야지
이런 느낌으로 넣는것
그리고 이렇게해서 넣었는데 la.la.la 이렇게 되면 좋은게
la.la.la.이러면 마지막 점을 생략하는 방법이 필요하다.
->.property-detail dd span:last-child::after
여기의 내용을 지우려면 content: '';으로
    height: 1px;

누르는거 같은 마우스 느낌은 css에서 cursor: pointer;

css작성 패턴(김버그꺼)
변화가 드라마틱한 position 관련 친구들을 먼저 선언한다

그다음에 Box에 관한 것들을 선언한다: display, box-model 관련 친구들

타이포그래피에 관한 것들을 선언한다

백그라운드 관련 코드를 선언한다

기타 등등..
->절대적인건 없고 그냥 좀 효율적으로 일관성있게 짜면 된다.
