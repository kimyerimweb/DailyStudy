transition
어떤 이펙트 없이 갑자기 획 변하게 만들지 않겠다.
->스멀스멀 색이 변한다거나..스멀스멀이 핵심

property
duration: 변화가 일어나는 시간, 단위는 ms,s
[timing-function] ->생략가능, 변화 속도 지정
[delay] ->생략가능

transition: font-size 2500ms ->이런식으로 한다.
글자 크기를 2.5초동안 변화시킨다는 뜻

둘다 똑같이 하고 싶으면
transition: all 2500ms ->모든 속성을 스르륵

둘이 효과 다르게 하고 싶으면
transition: property1 duration1, property2, duration2
콤마로 구분한다.

timing-function
1.ease-in 천천히 바뀌다가 휙
2.ease-out 휙바뀌다가 천천히
3.ease-in-out 짬뽕
4.cubic-bezier() ->속도를 조정할 수 있음. 검색해서 그래프 조정해서 만드는거로 들어가서
만들고 복붙하자

delay
n초 후에 변화를 시작하고 싶음 ->ns를 맨 마지막에 넣음
n ms

----------------------------------------------------------
animation (트랜지션이랑 헷갈린다니 구분)
->트랜지션은 속성값이 변할 때 스르륵 변하고 싶어서 쓴느거고
->애니메이션은 그냥 자유도가 높게 변하고 싶어서 씀

애니메이션은 써야하는게 너무 많아서 그냥 쪼개서 사용하는게 속 편하다고 함

animation-name
@keyframes name {  ->name은 애니메이션 로직을 정해준다.
	from{
	}
	to{
	}
}

혹은 form to말고 0% { } 50% { } 100%{ } 으로 나눠서도 가능
퍼센트를 아무거나 가능

from to에 들어갈 말은 변화하고 싶은 속성을 쓰면 된다.
예를 들면 position: relative;는 공통이니까 그냥 원래 적용할 곳에 넣으면 되고
top:0 -> top:200px 으로 놓으면 0에서 200까지 움직임
색깔 바꾸는거는 백그라운드 컬러 설정 안하면 투명으로..

animation-duration
ms s 로 작성

animation-timing-function
트랜지션이랑 똑같음

트랜지션 실습 -> body에 폰트 선언해줘도 안먹음
그래서 버튼,인풋,textarea는 폰트 선언을 따로 그 태그에 해줘야함


animation-delay
트랜지션이랑 똑같음

animation-iteration-count
되풀이를 몇번할거냐? -> 디폴트는 한번
무한대는 infinite

animation-direction
from-to가 일종의 디렉션인데 reverse를 사용하면 반대로 수행된다.
alternate를 사용하면 정상-리버스-정상-리버스로 왔다갔다 가능함. 인피니트를 사용할 때 유용함.

커서 올리면 아래 줄 변하는거 실습
width가 0이면 그냥 px안적고 0만 적는게 관례

button:hover::after { } 호버 애프터 이 순서대로
그리고 버튼의 경우에는 호버 상태가 아니라 그냥 올린 것 만으로도 커서가 변하는 것이
사용자 관점에서 정당하기 때문에 button자체의 커서를 포인터로 바꿔준다.

커서를 올렸을 때 아래 바가 변하는 것은 아래 바 그 자체임ㅋㅋ
그래서 transition은 아래 바가 있는 애한테 줘야함
보통 작은 버튼이나 링크는 250ms로 준다.
-->근데 왜 호버랑 바로 연결이 되는거지? 컴퓨터가 어떻게 알아서?
트랜지션을 쓰는 경우는 이런 케이스뿐이라고 한다.

-------------------------------------------------------------
애니메이션 실습
aria-hidden -> 말을 안해주는거일뿐 디스플레이를 숨기진 않음
 트랜지션은 많이 써도 애니메이션은 그렇게 많이 쓰지 않음

-------
box shadow->어떻게 사용하냐에 따라서 이미지 느낌를 다르게 준다.
그림자 만들 때 쓰는거 맞음

요즘 유행하는거: neumorphism -> 입체감있는거
박스쉐도우는 속성 쓰는 순서가 중요함

h-offset v-offset blur spread color ->이순서
그림자 x축이동 그림자 y축이동 흐린정도 그림자사이즈 색상

블러는 픽셀로 표현함 그림자 사이즈도 픽셀 

어차피 피그마같은데서 알아서 생성해서 주기 때문에...

neumorphism box shadow를 검색해서 만드는 것도 그냥 사이트에서 알아서 다 해줌

그리고 값을 적는게 5개 다 할필요는 없고
4개 -> 스프레드 값 생략
3개 -> 스프레드, 블러값 생략

--------------------------------------------------------
opacity -> 투명도 조절
0:투명 1:불투명 그 사이값으로 조정
--------------------------------------------------------
overflow -> 자손같은 애들이 영역을 벗어났을 때 어떻게 조정해줄까?
삐져나오옹ㅁ
visible ->기본값. 그냥 보여줘라
auto -> 알아서 해라 
scroll -> 오토나 스크롤은 이름은 달라도 비슷하게 동작한다.
스크롤로 표시해라(옆에 스크롤바 생성)
hidden -> 안보이게 숨겨버림

오버플로우된 자식 요소들은 모두 개무시를 당하기 때문에
글자가 겹치게 될 수도 있다.

overflow-x
overflow-y 각각 조정 가능
------------------------------------------------------
transform -> 2차원, 3차원으로 조정 진정한 css 장인의 세계;;
원래 위치는 기억되고 있기 때문에 주변 요소들이 변하지 않는다. -> 어떤 요소 위에 덮어쓰는거처럼 쓰기도 가능
(포지션은 기억 못함)

항상 사용하는 함수만
translate(x,y) -> 요소를 원하는 위치로 이동시키고 싶을 때

x축만 쓰고 싶으면 translateX()만 하면 된다.

scale(N)->몸체 자체를 크고 작게, 배율->1은 자기 원래 사이즈
scale(x,y)

rotate(Ndeg) -> 각도를 돌려줄 때, 00도 90도 45도 이런 식으로
도는 액션은 따로 안보이고 그냥 돌고 결과만 보인다.

transform: scale(1.25) translate(30px, 40px) rotate(45deg);
위는 한꺼번에 쓰는거
-----------------------------------------------------------
visibility ->보여줄거냐 말거냐

visible -> 기본값
hidden

히든으로 놓으면 안보임
박스가 보이지만 않고 opacity=0이랑 비슷한 상태

display: none; -> 없는 존재처럼 취급해라
visibility: hidden; -> 있는데 안보이는 것

BEM,SCSS 찾아보기
------------------------------------------------------------------
Grid System -> 디자인을 만들 때 뭔가 규칙이 있다.
디자이너가 지 꼴리는대로 만들지 않기 때문에 프론트앤드 개발자도 이해를 해야할 필요가 있음

container -> grid 시스템이 적용되는 전체 틀
column -> 그리드 시스템에서 세로줄이 나눠주는 한 세로 공간: 칼럼
보통은 12칸으로 사용한다.
gutter ->여백(column영역 안에서 정한다.)
----------------------------------------------------------------------
Bootstrap-->그리드 시스템을 구현할 수 있는 css 프레임워크
반응형 시스템까지 가능하기 때문에..

솔직히 별로 안배우고 싶은데 
link를 가져옴
body아래에
 <div class="container">
   <div class="row">
    <div class="col-1">  ->칼럼 한칸짜리로 만들고 싶으면 이렇게
	넣고 싶은 코드
    </div>
   </div>
 </div>

container의 자식으로는 row만 와야하고 row안에는 col만 와야한다.
col안에 내가 쓰고 싶은 태그를 비로소 쓸 수 있다.

반응형 시스템을 대응해주는 것은 그냥 적당히 비율이 알아서 줄어든다.
class="col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2"
완전 작을 때 12
핸드폰 6
태블릿 4
컴터 3
와이드 스크린 2

더 많은 정보는 부트스트랩 사이트에서 사용
---------------------------------------------------------------
reset css->바로바로 스타일 입힐 수 있게 만든건데
김버그가 독단으로 하는게 아니고 에릭 마이어가 만듦.

inherit -> 부모의 요소를 상속받아라
color: inherit ->부모의 컬러를 상속받아라

버튼,텍스트에리어,인풋은 그냥 바디에 폰트 넣는걸로는 안먹어서
폰트를 한번 더 명시해야한다.
폰트 사이즈도 기본적으로 너무 작게 들어가기 때문에 16px으로 맞춰주고 나중에 바꾼다.
그리고 포커스나 액티브 되었을 때 구리구리한 스타일을 삭제해주자->외우는게 좋음
    outline: none;
    box-shadow: none;

ol혹은 ul, li는 앞에 리스트스타일이 없어져야..
ol,
ul,
li {
    list-style-type: none;
    padding-left: 0;
    margin-left: 0;
}

보통 p태그 안에 본문 폰트 크기는 같게 적용되는 경우가 많아서
미리 적용을 시켜놓으면 좋다.
폰트 크기/자간/행간/색 확인

*시안을 구현하기 전에 차근차근 뜯어보고 내가 무슨 작업을 할건지 생각하고
효율적으로 할 수 있는 방법이 무엇인지 생각해본다.
->일단 청소 한번 싹 하고 그 다음에 공통적인 요소는 무엇인지 생각해보고..