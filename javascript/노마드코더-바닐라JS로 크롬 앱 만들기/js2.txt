\는 역시 자바스크립트에서도 유효하다
''로 감싸진 문장 안에 '를 넣고 출력하고 싶으면 \'를 입력한다.
\는 정보로써 해석한다는 의미

\->escape

------------------------
문자열 결합에서 띄어쓰기 무시안함
--------------------------
코드를 작성할 때 기능은 변화시키지 말고
변수만 변화시킬 수 있게

변화o와 변화x인 부분의 구획을 나눠서 구현하는게 좋다.
군데군데 변할 수 있는 값이 끼어있으면 버그가 발생하기 쉽다.
---------------------------
js는 // /* */가 주석처리
너무 길지도 않고 짧지도 않은 적당히 설명하는 주석이 잘 쓴 주석
가장 좋은 코드는 주석조차 필요하지 않은 코드
---------------------------
탭키=스페이스바 4개
---------------------------
a = b 대입 연산자
a == b 일치 연산자 -> 이건 어느 범위까지 같다고 하는거여? 의미가 같다면 같다고 함
a === b 엄격한 일치 연산자(변수형까지 동일해야함)

두번째는 작은 프로그램에서는 큰 문제가 안되지만
거대한 프로그램에서는 버그를 발생시키기 쉽다.
---------------------------
null 의도적으로 값이 없는 값, 변수형으로도 분리
undefined 의도하지 않은 상황이며, 값이 정의되어 있지 않음, 변수형으로도 분리
---------------------------
true==1 -> 참
true==2 -> 거짓
자바스크립트는 1아니면 다 거짓
true===1 ->거짓
1은 true형이 아니라 거짓
0 === -0 -> 참
NaN === NaN -> 거짓, 애초에 수가 아님을 말하는 메세지정도

비교 연산자는
"10">=1 -> true

*대신 if안의 조건문은 0이면 거짓 1이상은 참*
' ' (빈문자열) -> false로 간주된다/!' ' -> true
undefined -> false
null -> false
javascript-equality-table참조
------------------------
prompt -> 사용자에게서 값을 받아서 반환 -> 기본은 콘솔창이고
코드로 쓸 때 변수에 대입할 수 있다.

프롬프트로 숫자를 받아오면 number가 아니라 string으로 받아온다.
-------------------------
&& -> 두개짜리는 값 반환 참,거짓
& -> 각 비트 and 연산 -> n비트값

if문 안에 if문 쓰느니 그냥 &&연산 혹은 || 연산을 써보도록 해보자.
기능상의 차이가 있을 수도 있지만 굳이 구현할 필요가 없으면 보기 좋은게 낫지
-------------------------
while, for
웹브라우저는 무한반복을 허용하지 않기 때문에 어느정도 시간이 흐르면
스크립트를 종료할 것인지 물어본다.
for( var i=0 ; i<10 ; i++ )

docment.write("abc"); abc라는 문자열이 웹페이지에 출력된다.
태그를 쓰면 태그의 역할을 적용해서 출력된다.
</br> -> 한 줄 새로쓰기 적용o

document.write(변수+"<br />"); 변수는 따옴표 밖에 넣어야 한다. 그래야 변수기능함
그리고 문자열끼리 잇고 싶으면 + 기호를 사용한다.
i++그대로 사용 가능
---------------------------
break,continue 둘다 사용 가능-> if문과 함께 사용
-------------------------
자바스크립튼 문자+숫자+숫자+문자 형태로 연결할 때
숫자를 먼저 연산하지 않고 각각 다른 문자로 치환해서 문자열끼리 연결된다.
---------------------------
함수 -> 재사용성

function 함수명(인자1,인자2..,인자n) {
	코드
	return 반환값;
}
--------------------------
함수는 return을 만나면 종료된다.
이후에 나오는 것은 return이든 return할애비든 다 무시한다.
--------------------------
get_argument(arg) { ->arg는 매개변수,파라미터
	...
}

get_argument(1) -> 1은 인자,아규먼트
엄격이 분리하면 함수의 인풋으로 들어가는 실제값이 인자고
인자를 받아주는 위치에 있는 변수가 매개변수
--------------------------
익명함수: 함수의 이름이 따로 정의되어 있지 않고 바로 사용하는 함수
(fuction (){
	i=0;
	while(i<10){
		document.write(i);
		i += 1;
	}
})(); 
함수는 재활용성을 높인다.
--------------------------
배열은 대괄호로 정의한다.
var name = ['kim','ye','rim'];
한번 { } 중괄호로 해봤는데 안된다. 주의하기

왜 name[0]=k??
name에는 kim,ye,rim으로 저장되어 있음 홀리싯?
->뭔가 잘못해서 그런가봄
var name = ["kim","ye","rim"];
선언할 때 대괄호와 큰따옴표 잘 지키기
이러니까 제대로 된다.
----------------------------
변수.toUpperCase(); -> 대문자로 바꿔줌
배열과 반복문의 결합은 강력해진다!
배열.length -> 배열에 들어있는 원소의 개수
----------------------------
배열 데이터 추가 
->뒤에 추가는 배열.push("추가");
->맨 앞에 추가는 배열.unshift("추가");
->특정 구간을 추출하거나 추가 배열.splice(1,0,"추가"); -> 1번 인덱스에 0개를 삭제하고 추가를 넣음
-----------------------------
배열 데이터 삭제 -> 배열.shift(); -> 0번인덱스 원소 완전 삭제
		  배열.pop();-> 맨 마지막 인덱스 원소 완전 삭제

배열 데이터 정렬 -> 배열.sort(); -> 알파벳이든 숫자든 오름차순 정렬 abcde
		  배열.reverse(); ->내림차순 정렬
정렬은 나중에 필요할 때 검색하기
-----------------------------
객체(object)/ 배열은 같은 데이터 타입의 원소를 써야하고 색인도 숫자로 자동 추가
	     객체는 색인을 문자로도 만들 수 있다. 0,1,2아니고 "first","second"가능

var grade = {}; //{}와 new object는 같은 의미이다. var grade = new object;
grade['egoing'] = 10; //grade.egoing도 같은 의미로 10을 반환함.
grade['k8805'] = 6;
grade['sorialgi'] = 80;

var grades = {'egoing': 10,'k8805': 6,'sorialgi': 80};

이런식으로 가느으응, 객체는 중괄호이다.
'egoing' -> key, 10 -> value

grade['ego'+'ing'] 도 위와 같은 기능을 하지만
grade.'ego'+'ing'은 다르다. 같은 기능이 아님.
-------------------------------
배열은 순서가 자동으로 기록되어 있다. 하지만
객체는 순서가 없고 key와 value만 있다.

for(key in 객체){ ->for문은 객체가 가리키는 key값을 하나씩 가져와서 저 in앞에 key에 담는다.
	document.write("key : "+key+" value: "+grades[key]+"<br />");
}

grades[key]
--------------------------------
 var grades = {
            'list' : {'egoing' : 10, 'k8805' : 8, 'sorialgi' : 80},
            'show' : function(){  //콤마로 객체의 원소 구별
                alert('Hello world!');
            },
            'whatIsThis' :function(){
                alert(this.list.egoing); //디스를 부르는 주체가 grades니까..
            }
        }
        alert(grades['list']['egoing']); //10
        grades['show'](); //alert으로 감싸면 undefined가 나옴
        grades['whatIsThis'](); //10
------------------------------------
모듈화->큰건 작은 것의 조합이다.
바닐라 자바스크립트는 모듈이라는 개념이 존재하진 않지만
구동되는 환경에 따라서 서로 다른 모듈화 방법이 제공되고 있다. (웹브라우저/node.js/구글 앱스 스크립트 등등)
그래서 다 각자 매뉴얼을 보고 공부해야한다.
->다른게 아니라 js파일 만들어서 밖에서 함수 구현하는걸 보고 모듈화라고 하는것..
그냥 body맨 마지막에 script src="" 이렇게..
js파일 안에는 구현하고 싶은거
-------------------------------------
라이브러리
다운 받아서 쓴다. 예를 들면 제이쿼리..리액트도 라이브러리인듯

사용설명서:API 문서