구조적인 웹 문서 설계: 글의 구조를 쉽게 파악하기 좋게 html코드를 작성한다.

브라우저도 개요가 필요하다 -> sectioning element 올바르게 사용하는 방법을 알아야함

sectioning element (4종)
section
article
nav
aside

공통적으로 지켜야할 룰
sectioning elements = 단원
단원의 주제, 제목 => heading 태그
sectioning element 내에는 반드시 heading태그를 작성해야 한다.
(크기는 상관없다. h1~h6까지 상관ㄴㄴ)

<section>
 <h1>섹션의 제목</h1>
 <p> ... </p>
</section>

<nav> -> 얘도 sectioning element중 하나
 <h1>메뉴</h1> ->반드시 제목 요소가 있어야 한다. (눈에 보이지 않아도 상관없음)
 <ul>
  <li>
   <a href="">링크</a>
  </li>
 </ul>
</nav>

---------------------------------------------
트위터 마크업 챌린지

이전까지는: 최소한의 기능/의미를 갖는 가장 작은 단위로 쪼개기 ->여전히 유효
이제는 :구획 나누기(논리적으로 긴밀하게 관련된 집합체들끼리 나누기)
->여기는 태블릿에 캡쳐해서 구획 나누기 그림 그려보기

구획나누기는 느낌으로 나누고 문서를 작성하는 사람의 관점에 따라 다를 수 밖에 없다.
정해진 규칙이라는 것은 없음. (비슷하게 나누기는 하겠지)

1.구획 나누기
2.적절한 sectioning element 정하기
----------------------------------------------------------------------------------
<header> : div랑 다른 기능을 가지진 않지만
뉘앙스상 도입부, 상단부 이런 뉘앙스를 더 살려줄 수 있다.

보통은 해당 페이지의 로고가 있으면 header 영역으로 잡는듯하다.
문법적으로 신경써야할 부분은 없고 의미만 잘 이해하면 된다.
---------------------------------------------------------------------------------
nav->문서간의 이동을 할 수 있는 경우에 사용함
역시 sectioning 이라서 h1~6중에 하나라도 제목 태그를 넣어야함
nav에 메뉴만 덜렁 만드는게 아니라 제목도 반드시 있어야한다.
왜냐면 sectioning element이기 때문이다.

같은 영역 내에 있어도 보기에 같은 리스트중에 하나로 나눌 수 없는 경우에는
밖에다 넣어도 된다.
--------------------------------------------------------------------------------
main->본문, 가장 핵심적인 정보 컨텐츠를 묶어줌
하나의 html문서 안에는 한개의 main만 사용 가능하나
header는 section, div, aside, nav,main 등에서도 사용이 가능하지만 main은 오직 하나만

main은 sectioning element가 아니라 h태그를 쓸 필요는 없음

IE7까지 지원을 하려면 다음과 같이 써줘야 되요
<div class="main> </div>
---------------------------------------------------------------------------------
section->sectioning element라서 꼭 h태그를 사용해야함
IE7까지 지원을 하려면 다음과 같이 써줘야 되요
<div class="section"></div>
논리적으로 완결된 집합체에 div대신 section을 사용한다. ->하나의 목적을 위해 필요한 모든 기능을 가진 완결성 있는 파트

<input 
                type="file" 
                multiple 
                accept="image/*, video/*"/>
이미지와 비디오 모든 확장자를 허용하고 여러가지를 한번에 선택할 수 있음.

인풋 파일은 죽어도 스타일 작업을 할 수 없는 태그이기 때문에
버튼과 인풋을 따로 만들고 자바스크립트로 따로 처리해야함

글자수를 쓰면 점점 원이 채워지는 동그라미(트위터에 그런 기능이 있음..)
은 그냥 글자수라는 정보가 중요하니 스트롱으로 놓고
css로 때운다
------------------------------------------------------------------------------
트위터 타임라인은 시간 순서가 중요하니까 ol
------------------------------------------------------------------------------
article -> sectioning element
논리적으로 완결된 집합체이긴 하지만
뉴스 기사 블로그처럼 안에 들어있는 정보 컨텐츠가 정보로써 완결성이 있는 경우에
section보다 뉘앙스를 살려주기 위해서 사용한다.

key vlaue? dl로 사용하라고 하는데 이거 기억 안나니까 복습

모달창 같은 것은 그냥 html에서 축약하는 그런거 따로 안쓰고 그냥 다 있다고 가정하고 마크업을 한다.
실제 마크업할 때 버튼을 너무 많이 쓴다..ㅠ

aria-label이랑 sr-only의 차이
-> 스타일 차이ㅠ 그냥 내 맘대로 쓰나봄
sr-only로 정보 컨텐츠를 브라우저에게 넘겨주는게 좋아보이긴 하는데
숨기기 귀찮으면 아리아도 나쁘지 않아보이고..
이건 검색해서 어떤 차이가 있는지 사람들의 견해를 봐야할듯
-------------------------------------------------------------------------------
aside->곁다리
world wide trend같은 약간 본문과 동떨어진거, 사이드바, 배너광고, 위젯
section으로 해도 되지만 aside로 뉘앙스를 더..

역시 sectioning element라서 h태그를 넣어야 한다.

더보기->더보기를 누르면 확장되는 부분은 강의에 안나옴ㅠ 뭐여
-------------------------------------------------------------------------------
footer는 sectioning element가 아니라서 굳이 h태그를 넣을 필요는 없음

사업자 정보나 카피라이트 같은 부분 같은 정보를 표시한다.
sectioning element 안에서 하단부를 맡는 부분도 footer로 감싸기 가능하다.

남용만 안하면 괜찮음
--------------------------------------------------------------------------------
header안에 nav가 들어감(구조상)

그리고 만들 때 구획을 나눠서 만들어놓고 나중에 합친다.

header-main-footer + aside 구조
aside는 메인과 footer의 사이에 넣는다.

필요에 따라서 div를 약간 추가하는 정도로 한다.

현재 위치해 있는 페이지에 대해서도 current page라고 하고 
읽어주기만 하고 안보이게..

------------------------------------
대표적인 소개 문구로 h1을 보통 어디서든 사용한다고 한다.

article 태그로 감싼 부분이 `독립적`으로 존재해도 되는 경우에 쓰입니다. ex ) 블로그 글,날씨 위젯
article태그 안에 section태그가 있어도 되고, section 태그 안에 article태그가 있어도 됩니다.
IE7까지 지원을 하려면 다음과 같이 써줘야 되요
<div class="article"> </div>

특히 이부분 작업을 할때 번역 요청 피드들의 그룹을 
section이라 해야할지 article이라 해야 할지, 
각각의 요청 피드들을 section이라 할지 article이라 할지 
동료개발자 분들과 의논을 많이했었습니다. 
결국에는 각각의 번역 요청 피드들은 독립적으로 존재 할 수 있는 부분이라 
생각해서 article태그를 사용했고 그 피드들을 하나의 관심사 그룹으로 
묶었으니 section태그를 사용했습니다.

Javascript가 방대해지면, Javascript,HTML 그리고 CSS가 
조화롭게 이루어이지 않았기 때문이에요. 
HTML과 CSS를 다시 살펴보고 모두 지우고 처음부터 다시 짜보세요.

